@Library('helloworld') _
pipeline {
    agent { label 'asm-builder'}

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()           //不允许并行构建
        timeout(time: 20, unit: 'MINUTES')  //超时时间
        gitLabConnection('jenkins')          //gitlab插件连接器
    }


    environment {
        REGISTRY = "https://harbor.synsense-neuromorphic.com"
        IMAGE_REPO = "harbor.synsense-neuromorphic.com/local/asm"
 //       DINGTALK_CREDS = credentials('dingTalk')
//         REGISTRY_CREDS = credentials('docker-user-pwd')
        REGISTRY_CREDS = 'docker-user-pwd'
        TAB_STR = "\n                  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
    }

    stages {
        stage('env') {
            steps {
                script{
                    sh 'printenv'
                }
            }
        }
        stage('checkout') {
            steps {  //在默认的 jnlp ,inbound-agent 容器执行
                checkout scm   // checkout 代码
                updateGitlabCommitStatus(name: env.STAGE_NAME, state: 'success')
                script{
                    env.BUILD_TASKS = env.STAGE_NAME + "√..." + env.TAB_STR
                }
            }
        }
        stage('mvn package') {
            steps {
                container('ci-tools') {   //指定在 ci-tools 容器里执行
                script{
                    sh 'mvn clean package'  // mvn 编译,跳过测试
           //       sh 'mvn clean package -Dmaven.test.skip=true'  // mvn 编译,跳过测试
                   }
                }
            }
        }
         stage('sonar'){
                    failFast true
                    parallel {
                        stage('Unit Test') {
                            steps {
                                echo "Unit Test Stage Skip..."
                            }
                        }
                        stage('Code Scan') {
                            steps {
                                container('ci-tools') {
                                    script{
                                        devops.scan().start()
                                    }
                                }
                            }
                        }
                    }
                }
        stage('build-image') {
            steps {
                container('ci-tools') {  //指定在 ci-tools 容器里执行
                    script{
                        devops.docker(env.IMAGE_REPO,env.GIT_COMMIT,env.REGISTRY_CREDS).build().push()
                    }
                }
            }
        }
        stage('deploy') {
            steps {
                container('ci-tools') {
                    script {
                        devops.deploy("manifest").start().check()
                    }
                }
            }
        }

  stage('robot') {
            when {
                expression { BRANCH_NAME ==~ /v.*/ }
            }
            steps {
                container('ci-tools') {
                    script{
                        devops.robot('hello world').start()
                    }
                }
            }
        }

    }
    post {
        success {
            container('ci-tools') {
                echo 'Congratulations!'
                sh """
                """
            }

        }
        failure {
            container('ci-tools') {
                echo 'Oh no!'
                sh """
                """
            }

        }
        always {
            echo 'I will always say Hello again!'
        }
    }
}
